{
    // 监听端口
    "port": 9090,
    //
    // 日志记录
    "logs": {
        // 访问日志
        "access": {
            // 存放路径
            "dir": "/log/access",
            // 日志名称及滚动规则: 支持参数%date表示日期(yyy-MM-dd), %i表示日志索引(从1开始),
            "rule": "access_log-%date-%i.log",
            // 单个日志最大大小,默认1024超过进行滚动
            "size": 1024,
            // 日志大小单位,可选[KB,MB,GB],默认KB
            "unit": "KB"
        },
        // 错误日志
        "error": {
            // 存放路径
            "dir": "/log/error",
            // 日志名称及滚动规则: 支持参数%date表示日期(yyy-MM-dd), %i表示日志索引(从1开始),
            "rule": "error_log-%date-%i.log",
            // 单个日志最大大小,默认1024超过进行滚动
            "size": 1024,
            // 日志大小单位,可选[KB,MB,GB],默认KB
            "unit": "KB"
        }
    },

    // 资源根目录
    "root": "D:/中冶赛迪/混匀物料/部署程序/前端/混匀/dist",

    // 前端静态资源
    "frontends": [
        {
            // 请求路径
            "location": "/web1",
            // 对应资源路径
            "dir": "F:/JavaCode/mini-nginx/src/main/resources/template/web1",
            // 后续还需要考虑缓存
            "cache": {
                // 是否启用缓存
                "enable": true,
                // 缓存秒数
                "maxAge": 65535
            },
            // 资源未找到情况下重新路由
            "rewrite": "/web2"
        },
        {
            "location": "/web2",
            "dir": "F:/JavaCode/mini-nginx/src/main/resources/template/web2",
            // 自定义请求头
            "headers": {
                "Frontend_Header1": ["frontend_header_value_1_1", "frontend_header_value_1_2"],
                "Frontend_Header2": ["test_header_value_2_1", "test_header_value_2_2"]
            }
        },
        {
            "location": "/web",
            "dir": "D:/中冶赛迪/混匀物料/部署程序/前端/混匀/dist"
        }
    ],
    // 代理的上游
    "upstreams": [
        {
            // 代理的前缀
            "location": "/chat",
            // 代理的服务地址, 可以进行负载均衡
            "servers": [
                {
                    "server": "http://localhost:8080/websocket"
                }
            ],
            // 进行webSocket代理
            "websocket": true,
            // 自定义请求头
            "headers": {
                "Test_Header1": ["test_header_value_1_1", "test_header_value_1_2"],
                "Test_Header2": ["test_header_value_2_1", "test_header_value_2_2"]
            }
        },
        {
            // 代理的前缀
            "location": "/api",
            // 代理的服务地址, 可以进行负载均衡
            "servers": [
                {
                    "server": "http://localhost:8080/",
                    // 权重：1-10
                    "weight": 1
                },
                {
                    "server": "http://localhost:8080/",
                    "weight": 2
                },
                {
                    "server": "http://localhost:8080/",
                    "weight": 3
                }
            ],
            // 负载均衡策略: 轮询roll，随机random，一致性hash
            "loadBalance": "roll",
            // 自定义请求头
            "headers": {
                "Test_Header1": ["test_header_value_1_1", "test_header_value_1_2"],
                "Test_Header2": ["test_header_value_2_1", "test_header_value_2_2"]
            }
        },
        {
            // 代理的前缀, 支持正则表达式
            "location": "/server",
            // 代理的服务地址, 可以进行负载均衡
            "servers": [
                {
                    "server": "http://localhost:8080/",
                    "weight": 1
                },
                {
                    "server": "http://localhost:8080/",
                    // 权重: 1-10
                    "weight": 2
                },
                {
                    "server": "http://localhost:8080/",
                    "weight": 3
                }
            ],
            // 负载均衡策略: 轮询roll，随机random，一致性hash
            "loadBalance": "random"
        },

        // TODO / 根地址应该最后匹配才对，后续需要加入最佳的路径匹配策略
        {
            // 代理的前缀
            "location": "/",
            // 代理的服务地址, 可以进行负载均衡
            "servers": [
                {
                    "server": "http://localhost:8080"
                }
            ]
        }
    ],
    // 错误处理
    "errors": [
        {
            // 状态码
            "code": 404,
            // 资源页面
            "dir": ""
        },
        {
            // 状态码
            "code": 401,
            // 资源页面
            "dir": ""
        },
        {
            // 状态码
            "code": 500,
            // 资源页面
            "dir": ""
        }
    ]
}